
syntax = "proto3";
import "google/protobuf/empty.proto";
package merchantflows;

message ResolveMerchantRequest {
    string ApiKey = 1;
}

message ResolveMerchantResponse{
    optional string MerchantId = 1;
}

message AddMerchantRequest {
    string Id = 1;
    string ApiKey = 2;
}

message EnableDisableRequest {
    string Id = 1;
    bool Enable = 2;
}

message UpdateApiKeyRequest {
    string Id = 1;
    string ApiKey = 2;
}

message IsMerchantRequest {
    string ClientId = 1;
}

message IsMerchantResponse {
    bool IsMerchant = 1;
}

message AddCallbackUrlRequest{
    string ClientId = 1;
    string CallbackUrl = 2;
}

message RemoveCallbackUrlRequest{
    string ClientId = 1;
    string CallbackUrl = 2;
}

message UpdateComissionSettingsRequest{
    string ClientId = 1;
    double ComissionPercent = 2;
}

message GetMerchantSettingsRequest{
    string ClientId = 1;
}

message GetMerchantSettingsResponse{
    merchantflows.MerchantSettingsModel Settings = 1;
}

message MerchantSettingsModel{
    repeated string CallbackUrls = 1;
    double ComissionPercent = 2;
    string ApiKey = 3;
}
message GetCallbacksLogsRequest{
    string ClientId = 1;
    int64 From = 2;
    int64 To = 3;
}

message CallbackLogModel{
    int64 ExecuteDate = 1;
    int64 CreateDate = 2;
    int32 HttpStatusCode = 3;
    string Message = 4;
    string Url = 5;
    optional string ClientId = 6;
    optional string  OrderId = 7;
    string MerchantId = 8;
    string RequestBody = 9;
    string ResponseBody = 10;
    int32 Attempt = 11;
}

enum CallbackOverrideType{
    FirstConfirm = 0;
    FullConfirm = 1;
}

message MerchantOverrideModel{
    string Currency = 1;
    string Network = 2;
    merchantflows.CallbackOverrideType CallbackType = 3;
}

message AddMerchantOverrideRequest{
    string ClientId = 1;
    merchantflows.MerchantOverrideModel MerchantOverride = 2;
}

message GetMerchantOverridesRequest{
    string ClientId = 1;
}

service MerchantFlowsService {
    rpc Resolve(merchantflows.ResolveMerchantRequest) returns (merchantflows.ResolveMerchantResponse);
    rpc Add(merchantflows.AddMerchantRequest) returns (google.protobuf.Empty);
    rpc EnableDisable(merchantflows.EnableDisableRequest) returns (google.protobuf.Empty);
    rpc UpdateApiKey(merchantflows.UpdateApiKeyRequest) returns (google.protobuf.Empty);
    rpc IsMerchant(merchantflows.IsMerchantRequest) returns (merchantflows.IsMerchantResponse);
    rpc AddCallbackUrl(merchantflows.AddCallbackUrlRequest) returns (google.protobuf.Empty);
    rpc RemoveCallbackUrl(merchantflows.RemoveCallbackUrlRequest) returns (google.protobuf.Empty);
    rpc UpdateComissionSettings(merchantflows.UpdateComissionSettingsRequest)  returns (google.protobuf.Empty);
    rpc GetMerchantSettings(merchantflows.GetMerchantSettingsRequest) returns (merchantflows.GetMerchantSettingsResponse);
    rpc GetMerchantCallbackLogs(merchantflows.GetCallbacksLogsRequest) returns (stream merchantflows.CallbackLogModel);
    rpc AddMerchantCallbackOverride(merchantflows.AddMerchantOverrideRequest) returns (google.protobuf.Empty);
    rpc GetMerchantCallbackOverrides(merchantflows.GetMerchantOverridesRequest) returns (stream merchantflows.MerchantOverrideModel);
    rpc Ping(google.protobuf.Empty) returns (google.protobuf.Empty);
}

