
syntax = "proto3";
package wallets;

message SwapGrpcRequest {
    string ProcessId = 1;
    string ClientId = 2;
    int64 Timestamp = 3;
    string FrowWallet = 4;
    double FromDelta = 5;
    string ToWallet = 6;
    double ToDelta = 7;

}

enum OperationResult{
    Ok = 0;
    NotEnoughtFunds=1;
}

message SendGrpcRequest {
    string FromClientId = 1;
    string ToClientId = 2;
    double Amount = 3;
    string ProcessId = 4;
    string WalletId = 5;
    int64 Timestamp = 6;
}


message SendToMultipleDestinationsGrpcRequest {
    string FromClientId = 1;
    repeated GrpcWalletDestination ToClients = 2;
    string ProcessId = 3;
    string WalletId = 4;
    int64 Timestamp = 5;
}

message GrpcWalletDestination{
    string ToClientId = 1;
    double Amount = 2;
}

message SendGrpcResponse {
    wallets.OperationResult Result = 1;
    double FromBalance = 2;
    double ToBalance = 3;
    int64 ExecutedTimestamp = 4;
}

message SendToMultipleGrpcResponse {
    wallets.OperationResult Result = 1;
    double FromBalance = 2;
    repeated SentToGrpcModel ToBalances = 3;
    int64 ExecutedTimestamp = 4;
}

message SentToGrpcModel{
    string ToClientId = 1;
    double Balance = 2;
}

message SwapGrpcResponse {
    wallets.OperationResult Result = 1;
    double SellWalletBalance = 2;
    double BuyWalletBalance = 3;
    int64 ExecutedTimestamp =4;
}

message BalanceUpdateGrpcRequest {
    string ProcessId = 1;
    int64 Timestamp = 2;
    repeated wallets.BalanceUpdateCommands BalanceUpdates = 3;
}

message BalanceUpdateCommands {
    string ClientId = 1;
    string Wallet = 2;
    double Delta = 3;
}

message BalanceUpdateGrpcResponse {
    wallets.OperationResult Result = 1;
    int64 ExecutedTimestamp = 2;
    repeated double Balances = 3;
}

message GetWalletsBalanceRequest {
    string ClientId = 1;
}

message WalletBalanceGrpcModel{
    string Wallet = 1;
    double Balance = 2;
}

service WalletsFlowsGrpcService {
    rpc Swap(wallets.SwapGrpcRequest) returns (wallets.SwapGrpcResponse);
    rpc Send(wallets.SendGrpcRequest) returns (wallets.SendGrpcResponse);
    rpc SendToMultipleWallets(wallets.SendToMultipleDestinationsGrpcRequest) returns (wallets.SendToMultipleGrpcResponse);
    rpc BalanceUpdate(wallets.BalanceUpdateGrpcRequest) returns (wallets.BalanceUpdateGrpcResponse);
    rpc GetWalletsBalance(wallets.GetWalletsBalanceRequest) returns (stream wallets.WalletBalanceGrpcModel);
 }

